"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeUserInfoFromUrl = void 0;
const CiEnvironments_1 = require("./CiEnvironments");
const evaluateVariableExpression_1 = __importDefault(require("./evaluateVariableExpression"));
function detectCiEnvironment(env) {
    for (const ciEnvironment of CiEnvironments_1.CiEnvironments) {
        const detected = detect(ciEnvironment, env);
        if (detected) {
            return detected;
        }
    }
}
exports.default = detectCiEnvironment;
function removeUserInfoFromUrl(value) {
    if (!value)
        return value;
    try {
        const url = new URL(value);
        url.password = '';
        url.username = '';
        return url.toString();
    }
    catch (ignore) {
        return value;
    }
}
exports.removeUserInfoFromUrl = removeUserInfoFromUrl;
function detectGit(ciEnvironment, env) {
    const revision = (0, evaluateVariableExpression_1.default)(ciEnvironment.git.revision, env);
    if (!revision) {
        return undefined;
    }
    const remote = (0, evaluateVariableExpression_1.default)(ciEnvironment.git.remote, env);
    if (!remote) {
        return undefined;
    }
    const tag = (0, evaluateVariableExpression_1.default)(ciEnvironment.git.tag, env);
    const branch = (0, evaluateVariableExpression_1.default)(ciEnvironment.git.branch, env);
    return Object.assign(Object.assign({ revision, remote: removeUserInfoFromUrl(remote) }, (tag && { tag })), (branch && { branch }));
}
function detect(ciEnvironment, env) {
    const url = (0, evaluateVariableExpression_1.default)(ciEnvironment.url, env);
    const buildNumber = (0, evaluateVariableExpression_1.default)(ciEnvironment.buildNumber, env);
    if (url === undefined) {
        // The url is what consumers will use as the primary key for a build
        // If this cannot be determined, we return nothing.
        return undefined;
    }
    const git = detectGit(ciEnvironment, env);
    return Object.assign({ name: ciEnvironment.name, url,
        buildNumber }, (git && { git }));
}
//# sourceMappingURL=detectCiEnvironment.js.map