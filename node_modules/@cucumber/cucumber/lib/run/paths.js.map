{"version":3,"file":"paths.js","sourceRoot":"","sources":["../../src/run/paths.ts"],"names":[],"mappings":"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","sourcesContent":["import { promisify } from 'util'\nimport glob from 'glob'\nimport path from 'path'\nimport fs from 'mz/fs'\nimport { IRunConfiguration } from '../configuration'\n\nexport async function resolvePaths(\n  cwd: string,\n  configuration: Pick<IRunConfiguration, 'sources' | 'support'>\n): Promise<{\n  unexpandedFeaturePaths: string[]\n  featurePaths: string[]\n  supportCodePaths: string[]\n}> {\n  const unexpandedFeaturePaths = await getUnexpandedFeaturePaths(\n    cwd,\n    configuration.sources.paths\n  )\n  const featurePaths: string[] = await expandFeaturePaths(\n    cwd,\n    unexpandedFeaturePaths\n  )\n  let unexpandedSupportCodePaths = configuration.support.paths ?? []\n  if (unexpandedSupportCodePaths.length === 0) {\n    unexpandedSupportCodePaths = getFeatureDirectoryPaths(cwd, featurePaths)\n  }\n  const supportCodePaths = await expandPaths(\n    cwd,\n    unexpandedSupportCodePaths,\n    '.@(js|mjs)'\n  )\n  return {\n    unexpandedFeaturePaths,\n    featurePaths,\n    supportCodePaths,\n  }\n}\n\nasync function expandPaths(\n  cwd: string,\n  unexpandedPaths: string[],\n  defaultExtension: string\n): Promise<string[]> {\n  const expandedPaths = await Promise.all(\n    unexpandedPaths.map(async (unexpandedPath) => {\n      const matches = await promisify(glob)(unexpandedPath, {\n        absolute: true,\n        cwd,\n      })\n      const expanded = await Promise.all(\n        matches.map(async (match) => {\n          if (path.extname(match) === '') {\n            return await promisify(glob)(`${match}/**/*${defaultExtension}`)\n          }\n          return [match]\n        })\n      )\n      return expanded.flat()\n    })\n  )\n  return expandedPaths.flat().map((x) => path.normalize(x))\n}\n\nasync function getUnexpandedFeaturePaths(\n  cwd: string,\n  args: string[]\n): Promise<string[]> {\n  if (args.length > 0) {\n    const nestedFeaturePaths = await Promise.all(\n      args.map(async (arg) => {\n        const filename = path.basename(arg)\n        if (filename[0] === '@') {\n          const filePath = path.join(cwd, arg)\n          const content = await fs.readFile(filePath, 'utf8')\n          return content.split('\\n').map((x) => x.trim())\n        }\n        return [arg]\n      })\n    )\n    const featurePaths = nestedFeaturePaths.flat()\n    if (featurePaths.length > 0) {\n      return featurePaths.filter((x) => x !== '')\n    }\n  }\n  return ['features/**/*.{feature,feature.md}']\n}\n\nfunction getFeatureDirectoryPaths(\n  cwd: string,\n  featurePaths: string[]\n): string[] {\n  const featureDirs = featurePaths.map((featurePath) => {\n    let featureDir = path.dirname(featurePath)\n    let childDir: string\n    let parentDir = featureDir\n    while (childDir !== parentDir) {\n      childDir = parentDir\n      parentDir = path.dirname(childDir)\n      if (path.basename(parentDir) === 'features') {\n        featureDir = parentDir\n        break\n      }\n    }\n    return path.relative(cwd, featureDir)\n  })\n  return [...new Set(featureDirs)]\n}\n\nasync function expandFeaturePaths(\n  cwd: string,\n  featurePaths: string[]\n): Promise<string[]> {\n  featurePaths = featurePaths.map((p) => p.replace(/(:\\d+)*$/g, '')) // Strip line numbers\n  featurePaths = [...new Set(featurePaths)] // Deduplicate the feature files\n  return await expandPaths(cwd, featurePaths, '.feature')\n}\n"]}