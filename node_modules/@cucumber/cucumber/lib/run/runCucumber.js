"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runCucumber = void 0;
const messages_1 = require("@cucumber/messages");
const events_1 = require("events");
const helpers_1 = require("../formatter/helpers");
const helpers_2 = require("../cli/helpers");
const gherkin_streams_1 = require("@cucumber/gherkin-streams");
const pickle_filter_1 = __importDefault(require("../pickle_filter"));
const paths_1 = require("./paths");
const runtime_1 = require("./runtime");
const formatters_1 = require("./formatters");
const support_1 = require("./support");
async function runCucumber(configuration, environment = {
    cwd: process.cwd(),
    stdout: process.stdout,
    env: process.env,
}) {
    var _a;
    const { cwd, stdout, env } = environment;
    const newId = messages_1.IdGenerator.uuid();
    const { unexpandedFeaturePaths, featurePaths, supportCodePaths } = await (0, paths_1.resolvePaths)(cwd, configuration);
    const supportCodeLibrary = await (0, support_1.getSupportCodeLibrary)({
        cwd,
        newId,
        supportCodePaths,
        supportCodeRequiredModules: configuration.support.transpileWith,
    });
    const eventBroadcaster = new events_1.EventEmitter();
    const eventDataCollector = new helpers_1.EventDataCollector(eventBroadcaster);
    const cleanup = await (0, formatters_1.initializeFormatters)({
        cwd,
        stdout,
        eventBroadcaster,
        eventDataCollector,
        configuration: configuration.formats,
        supportCodeLibrary,
    });
    await (0, helpers_2.emitMetaMessage)(eventBroadcaster, env);
    const gherkinMessageStream = gherkin_streams_1.GherkinStreams.fromPaths(featurePaths, {
        defaultDialect: configuration.sources.defaultDialect,
        newId,
        relativeTo: cwd,
    });
    let pickleIds = [];
    if (featurePaths.length > 0) {
        pickleIds = await (0, helpers_2.parseGherkinMessageStream)({
            cwd,
            eventBroadcaster,
            eventDataCollector,
            gherkinMessageStream,
            order: (_a = configuration.sources.order) !== null && _a !== void 0 ? _a : 'defined',
            pickleFilter: new pickle_filter_1.default({
                cwd,
                featurePaths: unexpandedFeaturePaths,
                names: configuration.sources.names,
                tagExpression: configuration.sources.tagExpression,
            }),
        });
    }
    (0, helpers_2.emitSupportCodeMessages)({
        eventBroadcaster,
        supportCodeLibrary,
        newId,
    });
    const runtime = (0, runtime_1.makeRuntime)({
        cwd,
        eventBroadcaster,
        eventDataCollector,
        pickleIds,
        newId,
        supportCodeLibrary,
        supportCodePaths,
        supportCodeRequiredModules: configuration.support.transpileWith,
        options: configuration.runtime,
    });
    const success = await runtime.start();
    await cleanup();
    return {
        success,
        support: supportCodeLibrary,
    };
}
exports.runCucumber = runCucumber;
//# sourceMappingURL=runCucumber.js.map