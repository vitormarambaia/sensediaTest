"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeRuntime = void 0;
const runtime_1 = __importStar(require("../runtime"));
const coordinator_1 = __importDefault(require("../runtime/parallel/coordinator"));
function makeRuntime({ cwd, eventBroadcaster, eventDataCollector, pickleIds, newId, supportCodeLibrary, supportCodePaths, supportCodeRequiredModules, options: { parallel = 0, ...runtimeOptions } = {}, }) {
    // sprinkle specified runtime options over the defaults
    const options = {
        ...runtime_1.DEFAULT_RUNTIME_OPTIONS,
        ...runtimeOptions,
    };
    if (parallel > 0) {
        return new coordinator_1.default({
            cwd,
            eventBroadcaster,
            eventDataCollector,
            pickleIds,
            options,
            newId,
            supportCodeLibrary,
            supportCodePaths,
            supportCodeRequiredModules,
            numberOfWorkers: parallel,
        });
    }
    return new runtime_1.default({
        eventBroadcaster,
        eventDataCollector,
        newId,
        pickleIds,
        supportCodeLibrary,
        options,
    });
}
exports.makeRuntime = makeRuntime;
//# sourceMappingURL=runtime.js.map