{"version":3,"file":"formatters.js","sourceRoot":"","sources":["../../src/run/formatters.ts"],"names":[],"mappings":"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","sourcesContent":["import Formatter, { IFormatterStream } from '../formatter'\nimport { EventEmitter } from 'events'\nimport { EventDataCollector } from '../formatter/helpers'\nimport { ISupportCodeLibrary } from '../support_code_library_builder/types'\nimport { promisify } from 'util'\nimport { doesNotHaveValue } from '../value_checker'\nimport { WriteStream as TtyWriteStream } from 'tty'\nimport FormatterBuilder from '../formatter/builder'\nimport fs from 'mz/fs'\nimport path from 'path'\nimport { DEFAULT_CUCUMBER_PUBLISH_URL } from '../formatter/publish'\nimport HttpStream from '../formatter/http_stream'\nimport { Writable } from 'stream'\nimport { IFormatterConfiguration } from '../configuration'\n\nexport async function initializeFormatters({\n  cwd,\n  stdout,\n  eventBroadcaster,\n  eventDataCollector,\n  configuration = {},\n  supportCodeLibrary,\n}: {\n  cwd: string\n  stdout: IFormatterStream\n  eventBroadcaster: EventEmitter\n  eventDataCollector: EventDataCollector\n  configuration: IFormatterConfiguration\n  supportCodeLibrary: ISupportCodeLibrary\n}): Promise<() => Promise<void>> {\n  async function initializeFormatter(\n    stream: IFormatterStream,\n    target: string,\n    type: string\n  ): Promise<Formatter> {\n    stream.on('error', (error) => {\n      console.error(error.message)\n      process.exit(1)\n    })\n    const typeOptions = {\n      cwd,\n      eventBroadcaster,\n      eventDataCollector,\n      log: stream.write.bind(stream),\n      parsedArgvOptions: configuration.options ?? {},\n      stream,\n      cleanup:\n        stream === stdout\n          ? async () => await Promise.resolve()\n          : promisify<any>(stream.end.bind(stream)),\n      supportCodeLibrary,\n    }\n    if (doesNotHaveValue(configuration.options?.colorsEnabled)) {\n      typeOptions.parsedArgvOptions.colorsEnabled = (\n        stream as TtyWriteStream\n      ).isTTY\n    }\n    if (type === 'progress-bar' && !(stream as TtyWriteStream).isTTY) {\n      console.warn(\n        `Cannot use 'progress-bar' formatter for output to '${target}' as not a TTY. Switching to 'progress' formatter.`\n      )\n      type = 'progress'\n    }\n    return await FormatterBuilder.build(type, typeOptions)\n  }\n\n  const formatters: Formatter[] = []\n\n  formatters.push(\n    await initializeFormatter(\n      stdout,\n      'stdout',\n      configuration.stdout ?? 'progress'\n    )\n  )\n\n  if (configuration.files) {\n    for (const [target, type] of Object.entries(configuration.files)) {\n      const stream: IFormatterStream = fs.createWriteStream(null, {\n        fd: await fs.open(path.resolve(cwd, target), 'w'),\n      })\n      formatters.push(await initializeFormatter(stream, target, type))\n    }\n  }\n\n  if (configuration.publish) {\n    const { url = DEFAULT_CUCUMBER_PUBLISH_URL, token } = configuration.publish\n    const headers: { [key: string]: string } = {}\n    if (token !== undefined) {\n      headers.Authorization = `Bearer ${token}`\n    }\n    const stream = new HttpStream(url, 'GET', headers)\n    const readerStream = new Writable({\n      objectMode: true,\n      write: function (responseBody: string, encoding, writeCallback) {\n        console.error(responseBody)\n        writeCallback()\n      },\n    })\n    stream.pipe(readerStream)\n    formatters.push(await initializeFormatter(stream, url, 'message'))\n  }\n\n  return async function () {\n    await Promise.all(formatters.map(async (f) => await f.finished()))\n  }\n}\n"]}