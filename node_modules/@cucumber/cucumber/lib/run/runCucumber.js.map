{"version":3,"file":"runCucumber.js","sourceRoot":"","sources":["../../src/run/runCucumber.ts"],"names":[],"mappings":";;;;;;AAAA,iDAAgD;AAChD,mCAAqC;AACrC,kDAAyD;AACzD,4CAIuB;AACvB,+DAA0D;AAC1D,qEAA2C;AAG3C,mCAAsC;AACtC,uCAAuC;AACvC,6CAAmD;AACnD,uCAAiD;AAE1C,KAAK,UAAU,WAAW,CAC/B,aAAgC,EAChC,cAA+B;IAC7B,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE;IAClB,MAAM,EAAE,OAAO,CAAC,MAAM;IACtB,GAAG,EAAE,OAAO,CAAC,GAAG;CACjB;;IAED,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,WAAW,CAAA;IACxC,MAAM,KAAK,GAAG,sBAAW,CAAC,IAAI,EAAE,CAAA;IAEhC,MAAM,EAAE,sBAAsB,EAAE,YAAY,EAAE,gBAAgB,EAAE,GAC9D,MAAM,IAAA,oBAAY,EAAC,GAAG,EAAE,aAAa,CAAC,CAAA;IAExC,MAAM,kBAAkB,GAAG,MAAM,IAAA,+BAAqB,EAAC;QACrD,GAAG;QACH,KAAK;QACL,gBAAgB;QAChB,0BAA0B,EAAE,aAAa,CAAC,OAAO,CAAC,aAAa;KAChE,CAAC,CAAA;IAEF,MAAM,gBAAgB,GAAG,IAAI,qBAAY,EAAE,CAAA;IAC3C,MAAM,kBAAkB,GAAG,IAAI,4BAAkB,CAAC,gBAAgB,CAAC,CAAA;IAEnE,MAAM,OAAO,GAAG,MAAM,IAAA,iCAAoB,EAAC;QACzC,GAAG;QACH,MAAM;QACN,gBAAgB;QAChB,kBAAkB;QAClB,aAAa,EAAE,aAAa,CAAC,OAAO;QACpC,kBAAkB;KACnB,CAAC,CAAA;IACF,MAAM,IAAA,yBAAe,EAAC,gBAAgB,EAAE,GAAG,CAAC,CAAA;IAE5C,MAAM,oBAAoB,GAAG,gCAAc,CAAC,SAAS,CAAC,YAAY,EAAE;QAClE,cAAc,EAAE,aAAa,CAAC,OAAO,CAAC,cAAc;QACpD,KAAK;QACL,UAAU,EAAE,GAAG;KAChB,CAAC,CAAA;IACF,IAAI,SAAS,GAAa,EAAE,CAAA;IAE5B,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;QAC3B,SAAS,GAAG,MAAM,IAAA,mCAAyB,EAAC;YAC1C,GAAG;YACH,gBAAgB;YAChB,kBAAkB;YAClB,oBAAoB;YACpB,KAAK,EAAE,MAAA,aAAa,CAAC,OAAO,CAAC,KAAK,mCAAI,SAAS;YAC/C,YAAY,EAAE,IAAI,uBAAY,CAAC;gBAC7B,GAAG;gBACH,YAAY,EAAE,sBAAsB;gBACpC,KAAK,EAAE,aAAa,CAAC,OAAO,CAAC,KAAK;gBAClC,aAAa,EAAE,aAAa,CAAC,OAAO,CAAC,aAAa;aACnD,CAAC;SACH,CAAC,CAAA;KACH;IACD,IAAA,iCAAuB,EAAC;QACtB,gBAAgB;QAChB,kBAAkB;QAClB,KAAK;KACN,CAAC,CAAA;IAEF,MAAM,OAAO,GAAG,IAAA,qBAAW,EAAC;QAC1B,GAAG;QACH,gBAAgB;QAChB,kBAAkB;QAClB,SAAS;QACT,KAAK;QACL,kBAAkB;QAClB,gBAAgB;QAChB,0BAA0B,EAAE,aAAa,CAAC,OAAO,CAAC,aAAa;QAC/D,OAAO,EAAE,aAAa,CAAC,OAAO;KAC/B,CAAC,CAAA;IACF,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,KAAK,EAAE,CAAA;IACrC,MAAM,OAAO,EAAE,CAAA;IAEf,OAAO;QACL,OAAO;QACP,OAAO,EAAE,kBAAkB;KAC5B,CAAA;AACH,CAAC;AAhFD,kCAgFC","sourcesContent":["import { IdGenerator } from '@cucumber/messages'\nimport { EventEmitter } from 'events'\nimport { EventDataCollector } from '../formatter/helpers'\nimport {\n  emitMetaMessage,\n  emitSupportCodeMessages,\n  parseGherkinMessageStream,\n} from '../cli/helpers'\nimport { GherkinStreams } from '@cucumber/gherkin-streams'\nimport PickleFilter from '../pickle_filter'\nimport { IRunConfiguration } from '../configuration'\nimport { IRunEnvironment, IRunResult } from './types'\nimport { resolvePaths } from './paths'\nimport { makeRuntime } from './runtime'\nimport { initializeFormatters } from './formatters'\nimport { getSupportCodeLibrary } from './support'\n\nexport async function runCucumber(\n  configuration: IRunConfiguration,\n  environment: IRunEnvironment = {\n    cwd: process.cwd(),\n    stdout: process.stdout,\n    env: process.env,\n  }\n): Promise<IRunResult> {\n  const { cwd, stdout, env } = environment\n  const newId = IdGenerator.uuid()\n\n  const { unexpandedFeaturePaths, featurePaths, supportCodePaths } =\n    await resolvePaths(cwd, configuration)\n\n  const supportCodeLibrary = await getSupportCodeLibrary({\n    cwd,\n    newId,\n    supportCodePaths,\n    supportCodeRequiredModules: configuration.support.transpileWith,\n  })\n\n  const eventBroadcaster = new EventEmitter()\n  const eventDataCollector = new EventDataCollector(eventBroadcaster)\n\n  const cleanup = await initializeFormatters({\n    cwd,\n    stdout,\n    eventBroadcaster,\n    eventDataCollector,\n    configuration: configuration.formats,\n    supportCodeLibrary,\n  })\n  await emitMetaMessage(eventBroadcaster, env)\n\n  const gherkinMessageStream = GherkinStreams.fromPaths(featurePaths, {\n    defaultDialect: configuration.sources.defaultDialect,\n    newId,\n    relativeTo: cwd,\n  })\n  let pickleIds: string[] = []\n\n  if (featurePaths.length > 0) {\n    pickleIds = await parseGherkinMessageStream({\n      cwd,\n      eventBroadcaster,\n      eventDataCollector,\n      gherkinMessageStream,\n      order: configuration.sources.order ?? 'defined',\n      pickleFilter: new PickleFilter({\n        cwd,\n        featurePaths: unexpandedFeaturePaths,\n        names: configuration.sources.names,\n        tagExpression: configuration.sources.tagExpression,\n      }),\n    })\n  }\n  emitSupportCodeMessages({\n    eventBroadcaster,\n    supportCodeLibrary,\n    newId,\n  })\n\n  const runtime = makeRuntime({\n    cwd,\n    eventBroadcaster,\n    eventDataCollector,\n    pickleIds,\n    newId,\n    supportCodeLibrary,\n    supportCodePaths,\n    supportCodeRequiredModules: configuration.support.transpileWith,\n    options: configuration.runtime,\n  })\n  const success = await runtime.start()\n  await cleanup()\n\n  return {\n    success,\n    support: supportCodeLibrary,\n  }\n}\n"]}