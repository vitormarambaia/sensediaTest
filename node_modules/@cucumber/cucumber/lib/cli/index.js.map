{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/cli/index.ts"],"names":[],"mappings":";;;;;AAAA,uCAA2C;AAC3C,2DAAqD;AACrD,mEAA4E;AAE5E,gCAAoC;AACpC,gEAAsC;AAQtC,MAAqB,GAAG;IAMtB,YAAY,EACV,IAAI,EACJ,GAAG,EACH,MAAM,EACN,GAAG,GAMJ;QACC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;QACd,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;IAChB,CAAC;IAED,KAAK,CAAC,GAAG;QACP,MAAM,IAAA,mCAAe,EAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAC/B,MAAM,QAAQ,GAAG,qBAAU,CAAC,KAAK,CAC/B,MAAM,IAAA,yBAAe,EAAC;YACpB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,GAAG,EAAE,IAAI,CAAC,GAAG;SACd,CAAC,CACH,CAAA;QACD,MAAM,aAAa,GAAG,MAAM,IAAA,0CAAkB,EAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,CAAA;QAClE,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAA,iBAAW,EAAC,aAAa,EAAE;YACnD,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,GAAG,EAAE,IAAI,CAAC,GAAG;SACd,CAAC,CAAA;QACF,OAAO;YACL,sBAAsB,EACpB,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO;gBAC9B,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY;gBAC9B,CAAC,IAAA,sCAAc,EAAC,IAAI,CAAC,GAAG,CAAC,sBAAsB,CAAC;YAClD,qBAAqB,EAAE,QAAQ,CAAC,OAAO,CAAC,IAAI;YAC5C,OAAO;SACR,CAAA;IACH,CAAC;CACF;AA9CD,sBA8CC","sourcesContent":["import { getExpandedArgv } from './helpers'\nimport { validateInstall } from './install_validator'\nimport { buildConfiguration, isTruthyString } from './configuration_builder'\nimport { IFormatterStream } from '../formatter'\nimport { runCucumber } from '../run'\nimport ArgvParser from './argv_parser'\n\nexport interface ICliRunResult {\n  shouldAdvertisePublish: boolean\n  shouldExitImmediately: boolean\n  success: boolean\n}\n\nexport default class Cli {\n  private readonly argv: string[]\n  private readonly cwd: string\n  private readonly stdout: IFormatterStream\n  private readonly env: NodeJS.ProcessEnv\n\n  constructor({\n    argv,\n    cwd,\n    stdout,\n    env,\n  }: {\n    argv: string[]\n    cwd: string\n    stdout: IFormatterStream\n    env: NodeJS.ProcessEnv\n  }) {\n    this.argv = argv\n    this.cwd = cwd\n    this.stdout = stdout\n    this.env = env\n  }\n\n  async run(): Promise<ICliRunResult> {\n    await validateInstall(this.cwd)\n    const fromArgv = ArgvParser.parse(\n      await getExpandedArgv({\n        argv: this.argv,\n        cwd: this.cwd,\n      })\n    )\n    const configuration = await buildConfiguration(fromArgv, this.env)\n    const { success } = await runCucumber(configuration, {\n      cwd: this.cwd,\n      stdout: this.stdout,\n      env: this.env,\n    })\n    return {\n      shouldAdvertisePublish:\n        !configuration.formats.publish &&\n        !fromArgv.options.publishQuiet &&\n        !isTruthyString(this.env.CUCUMBER_PUBLISH_QUIET),\n      shouldExitImmediately: fromArgv.options.exit,\n      success,\n    }\n  }\n}\n"]}