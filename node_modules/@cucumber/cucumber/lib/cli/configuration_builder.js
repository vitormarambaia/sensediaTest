"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTruthyString = exports.buildConfiguration = void 0;
const option_splitter_1 = __importDefault(require("./option_splitter"));
async function buildConfiguration(fromArgv, env) {
    const { args, options } = fromArgv;
    return {
        sources: {
            paths: args,
            defaultDialect: options.language,
            names: options.name,
            tagExpression: options.tags,
            order: options.order,
        },
        support: {
            transpileWith: options.requireModule,
            paths: options.require,
        },
        runtime: {
            dryRun: options.dryRun,
            failFast: options.failFast,
            filterStacktraces: !options.backtrace,
            parallel: options.parallel,
            retry: options.retry,
            retryTagFilter: options.retryTagFilter,
            strict: options.strict,
            worldParameters: options.worldParameters,
        },
        formats: {
            stdout: options.format.find((option) => !option.includes(':')),
            files: options.format
                .filter((option) => option.includes(':'))
                .reduce((mapped, item) => {
                const [type, target] = option_splitter_1.default.split(item);
                return {
                    ...mapped,
                    [target]: type,
                };
            }, {}),
            publish: makePublishConfig(options, env),
            options: options.formatOptions,
        },
    };
}
exports.buildConfiguration = buildConfiguration;
function isTruthyString(s) {
    if (s === undefined) {
        return false;
    }
    return s.match(/^(false|no|0)$/i) === null;
}
exports.isTruthyString = isTruthyString;
function isPublishing(options, env) {
    return (options.publish ||
        isTruthyString(env.CUCUMBER_PUBLISH_ENABLED) ||
        env.CUCUMBER_PUBLISH_TOKEN !== undefined);
}
function makePublishConfig(options, env) {
    const enabled = isPublishing(options, env);
    if (!enabled) {
        return false;
    }
    return {
        url: env.CUCUMBER_PUBLISH_URL,
        token: env.CUCUMBER_PUBLISH_TOKEN,
    };
}
//# sourceMappingURL=configuration_builder.js.map