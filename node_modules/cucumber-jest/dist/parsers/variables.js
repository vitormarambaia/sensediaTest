"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault2 = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.getVariables = getVariables;
exports.populateVariables = populateVariables;

var _concat = _interopRequireDefault2(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _includes = _interopRequireDefault2(require("@babel/runtime-corejs3/core-js-stable/instance/includes"));

var _reverse = _interopRequireDefault2(require("@babel/runtime-corejs3/core-js-stable/instance/reverse"));

var _sort = _interopRequireDefault2(require("@babel/runtime-corejs3/core-js-stable/instance/sort"));

var _startsWith = _interopRequireDefault2(require("@babel/runtime-corejs3/core-js-stable/instance/starts-with"));

var _endsWith = _interopRequireDefault2(require("@babel/runtime-corejs3/core-js-stable/instance/ends-with"));

var _trim = _interopRequireDefault2(require("@babel/runtime-corejs3/core-js-stable/instance/trim"));

var _entries = _interopRequireDefault2(require("@babel/runtime-corejs3/core-js-stable/object/entries"));

var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime-corejs3/helpers/toConsumableArray"));

var _fs = _interopRequireDefault2(require("fs"));

var _path = _interopRequireDefault2(require("path"));

var _interopRequireDefault = _interopRequireDefault2(require("@babel/runtime-corejs3/helpers/interopRequireDefault"));

var _escapeStringRegexp = _interopRequireDefault2(require("escape-string-regexp"));

var _flattenAnything = require("flatten-anything");

var _mergeDeep = _interopRequireDefault2(require("merge-deep"));

var _mkdirp = _interopRequireDefault2(require("mkdirp"));

var _env = _interopRequireDefault2(require("../configs/env"));

var _getPaths = require("../utils/getPaths");

function getVariables(cwd, featurePath, extensions) {
  var _context, _context2, _context3, _context4;

  let _result = [];

  for (let _key = 0, _length = extensions.length, _value; _key < _length; ++_key) {
    _value = extensions[_key];
    if (_value !== 'feature') _result.push(_value);
  }

  const varExts = _result;

  const fileExtension = _path.default.extname(featurePath);

  const fileName = _path.default.basename(featurePath, fileExtension);

  const varExtensions = varExts.join(',');
  const envPaths = (0, _concat.default)(_context = [_path.default.normalize(_path.default.join('{,!(node_modules)/**}', `global.vars.{${varExtensions}}`))]).call(_context, (0, _toConsumableArray2.default)(_env.default.ENV_NAME ? [_path.default.normalize(_path.default.join('{,!(node_modules)/**}', `global.vars.${_env.default.ENV_NAME}.{${varExtensions}}`))] : []), [_path.default.normalize(_path.default.join('{,!(node_modules)/**}', `${fileName}.vars.{${varExtensions}}`))], (0, _toConsumableArray2.default)(_env.default.ENV_NAME ? [_path.default.normalize(_path.default.join('{,!(node_modules)/**}', `${fileName}.vars.${_env.default.ENV_NAME}.{${varExtensions}}`))] : []));
  const allVarFiles = (0, _getPaths.getPaths)(cwd, envPaths) || []; // if no files were found, skip parsing / writing temp feature file

  if (allVarFiles.length === 0) {
    return false;
  } // const featureFileName = path.basename(featurePath, fileExtension);
  // const fileExtensions = varExts.join('|');
  // const globalVarsRegex = new RegExp(
  //     `global.vars.(${
  //         env.ENV_NAME
  //             ? `?(${env.ENV_NAME})?.${fileExtensions}`
  //             : `${fileExtensions}`
  //     })`
  // );
  //
  // const featureVarsRegex = new RegExp(
  //     `${featureFileName}.vars.(${
  //         env.ENV_NAME
  //             ? `?(${env.ENV_NAME}?.${fileExtensions})`
  //             : `${fileExtensions}`
  //     })`
  // );


  let _result2 = [];

  for (let _key2 = 0, _length2 = allVarFiles.length, _value2; _key2 < _length2; ++_key2) {
    _value2 = allVarFiles[_key2];
    if ((0, _includes.default)(_value2).call(_value2, 'global.vars')) _result2.push(_value2);
  }

  const globalVarFiles = (0, _reverse.default)(_context2 = (0, _sort.default)(_result2).call(_result2)).call(_context2);
  let _result3 = [];

  for (let _key3 = 0, _length3 = allVarFiles.length, _value3; _key3 < _length3; ++_key3) {
    _value3 = allVarFiles[_key3];
    if (!(0, _includes.default)(_value3).call(_value3, 'global.vars')) _result3.push(_value3);
  }

  const suiteVarFiles = (0, _reverse.default)(_context3 = (0, _sort.default)(_result3).call(_result3)).call(_context3); // concat list of variable files, prioritizing feature over global files

  const _iterable4 = (0, _concat.default)(_context4 = []).call(_context4, (0, _toConsumableArray2.default)(globalVarFiles), (0, _toConsumableArray2.default)(suiteVarFiles));

  let _result4 = [];

  for (let _key4 = 0, _length4 = _iterable4.length, _value4; _key4 < _length4; ++_key4) {
    _value4 = _iterable4[_key4];
    if (Boolean(_value4, _key4, _iterable4)) _result4.push(_value4);
  }

  const varFiles = _result4;

  if (!varFiles.length) {
    return null;
  } // require all the variable files and merge them into a single object
  // ordering set above will ensure that variable files with feature name will override
  // any of the same values that are in global files.


  let _result5 = {};

  for (let _key5 = 0, _length5 = varFiles.length, _value5; _key5 < _length5; ++_key5) {
    _value5 = varFiles[_key5];

    const _raw = (0, _interopRequireDefault.default)(require(_value5));

    _result5 = (0, _mergeDeep.default)(_result5, (_raw === null || _raw === void 0 ? void 0 : _raw.default) || _raw);
  }

  const vars = _result5;
  return (0, _flattenAnything.flattenObject)(vars);
} // todo:: clean functions up


function replaceVariables(acc, row, key, value) {
  return acc.replace(new RegExp('(^|\\s|")\\$' + (0, _escapeStringRegexp.default)(key) + '(\\s|$|")', 'g'), text => {
    const hasStartSpace = (0, _startsWith.default)(text).call(text, ' ');
    const hasEndSpace = (0, _endsWith.default)(text).call(text, ' ');
    const hasStartQuotes = (0, _startsWith.default)(text).call(text, '"');
    const hasEndQuotes = (0, _endsWith.default)(text).call(text, '"'); // todo:: figure out any scenarios where we would need to escape chars for
    //        variables used in json
    //
    // const offset = args[args.length - 2];
    //
    // const isWrappedInQuotes =
    //     hasStartQuotes && hasEndQuotes;
    //
    // const nextChar = source.charAt(
    //     offset + text.length
    // );
    //
    // const prevCharMinusTwo = row.charAt(
    //     offset - 2
    // );
    //
    // const prevCharMinusOne = row.charAt(
    //     offset - 1
    // );
    // const hasColon = [
    //     prevCharMinusOne,
    //     prevCharMinusTwo
    // ].some((char) => char === ':');
    // const isJSON =
    //     (isWrappedInQuotes &&
    //         nextChar === ',' &&
    //         hasColon) ||
    //     (isWrappedInQuotes && hasColon);

    const rowTrimmed = (0, _trim.default)(row).call(row);
    const isDataTable = (0, _includes.default)(row).call(row, '|') && row.match(/\|/g).length >= 2 && (0, _endsWith.default)(rowTrimmed).call(rowTrimmed, '|') && (0, _startsWith.default)(rowTrimmed).call(rowTrimmed, '|'); // replace any characters that were captured as part of the regexp

    const baseValue = (hasStartSpace ? ' ' : '') + (hasStartQuotes ? '"' : '') + value.toString() + (hasEndQuotes ? '"' : '') + (hasEndSpace ? ' ' : ''); // escape any pipes if value contains pipe and found in data table

    return isDataTable ? baseValue.replace('|', '\\|') : baseValue;
  });
}

function populateRow(row, variables) {
  let _result6 = row + '';

  for (let _key6 = 0, _length6 = variables.length, _value6; _key6 < _length6; ++_key6) {
    _value6 = variables[_key6];
    _result6 = replaceVariables(_result6, row, _value6[0], _value6[1]);
  }

  return _result6;
}

function populateVariables(cwd, featurePath, variables) {
  const variableEntries = (0, _entries.default)(variables || {});

  if (!variableEntries.length) {
    return featurePath;
  }

  const source = _fs.default.readFileSync(featurePath, 'utf8');

  let tmpSource = [];
  const rows = source.split('\n'); // inline-loops will not convert nested methods

  for (let i = 0; i < rows.length; i++) {
    tmpSource.push(populateRow(rows[i], variableEntries));
  }

  tmpSource = tmpSource.join('\n'); // if the feature file changed from injecting variables, write the temp file

  if (tmpSource !== source) {
    _mkdirp.default.sync(_env.default.TEMP_PATH); // ensure the temp directory exists
    // derive the temporary path for the feature file w/ injected variables


    const featureSourcePath = _path.default.join(_env.default.TEMP_PATH, _path.default.basename(featurePath)); // write the temp feature file to tmp directory


    _fs.default.writeFileSync(featureSourcePath, tmpSource); // return temp feature file path


    return featureSourcePath;
  }

  return featurePath;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,