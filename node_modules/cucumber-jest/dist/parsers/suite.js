"use strict";

var _Object$keys = require("@babel/runtime-corejs3/core-js-stable/object/keys");

var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols");

var _filterInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/filter");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");

var _forEachInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/for-each");

var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors");

var _Object$defineProperties = require("@babel/runtime-corejs3/core-js-stable/object/define-properties");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.parseSuite = parseSuite;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/toConsumableArray"));

var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/slice"));

var _some = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/some"));

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/includes"));

var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/reduce"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _generateMessages = _interopRequireDefault(require("@cucumber/gherkin/dist/src/stream/generateMessages"));

var _IdGenerator = require("@cucumber/messages/dist/src/IdGenerator");

var _chalk = _interopRequireDefault(require("chalk"));

var _outdent = _interopRequireDefault(require("outdent"));

var _env = _interopRequireDefault(require("../configs/env"));

var _feature = require("./feature");

var _steps = require("./steps");

var _table = require("./table");

var _tags2 = require("./tags");

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context9; _forEachInstanceProperty(_context9 = ownKeys(Object(source), true)).call(_context9, function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context10; _forEachInstanceProperty(_context10 = ownKeys(Object(source))).call(_context10, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

function parseSuite(cwd, feature, extensions, cucumberSupportCode) {
  var _events$, _events$$gherkinDocum, _context;

  const featurePath = (0, _feature.parseFeature)(cwd, feature, extensions);

  const source = _fs.default.readFileSync(featurePath, 'utf8');

  const events = (0, _generateMessages.default)(source, _path.default.normalize(_path.default.relative(cwd, featurePath)), {
    includeSource: false,
    includeGherkinDocument: true,
    includePickles: true,
    newId: (0, _IdGenerator.uuid)()
  });

  if (!((_events$ = events[0]) !== null && _events$ !== void 0 && (_events$$gherkinDocum = _events$.gherkinDocument) !== null && _events$$gherkinDocum !== void 0 && _events$$gherkinDocum.feature)) {
    var _events$2;

    // feature is not defined if an error occurs while parsing
    // and the error is added as an attachment
    const attachment = (_events$2 = events[0]) === null || _events$2 === void 0 ? void 0 : _events$2.attachment;
    throw new Error((0, _outdent.default)`
            ${_chalk.default.red('[error]')} failed to parse feature file:\n
            file: ${_chalk.default.yellow(featurePath)}
            ${attachment ? [`message: ${attachment.text}`, `column: ${attachment.source.location.column}`, `line: ${attachment.source.location.line}`].join('\n') : ''}
            \n
        `);
  }

  const document = events[0].gherkinDocument.feature;
  const hasBackground = !!document.children[0].background;
  const specs = hasBackground ? (0, _slice.default)(_context = document.children).call(_context, 1) : document.children;
  const hasExcludeTags = _env.default.EXCLUDE_TAGS.length > 0;
  const hasTags = _env.default.TAGS.length > 0;
  const _iterable = document.tags;
  let _result = [];

  for (let _key = 0, _length = _iterable.length, _value; _key < _length; ++_key) {
    _value = _iterable[_key];
    _result[_key] = name;
  }

  const documentTags = _result;
  const documentHasTags = documentTags.length > 0 && (0, _some.default)(documentTags).call(documentTags, _tags2.matchesTags);
  const shouldSkipFeature = (0, _includes.default)(documentTags).call(documentTags, '@skip');
  let _result2 = false;

  for (let _key2 = 0, _length2 = specs.length, _value2; _key2 < _length2; ++_key2) {
    var _context2;

    _value2 = specs[_key2];

    if (_value2.scenario.tags.length && (0, _some.default)(_context2 = _value2.scenario.tags).call(_context2, ({
      name
    }) => (0, _tags2.matchesTags)(name))) {
      _result2 = true;
      break;
    }
  }

  const documentContainsSpecsWithTags = _result2;
  const scenarioTags = (0, _reduce.default)(specs).call(specs, (acc, spec) => {
    var _context3, _context4;

    return (0, _concat.default)(_context3 = []).call(_context3, (0, _toConsumableArray2.default)(acc), (0, _toConsumableArray2.default)((0, _map.default)(_context4 = spec.scenario.tags).call(_context4, ({
      name
    }) => name)));
  }, []);
  const documentHasDebugTag = (0, _includes.default)(scenarioTags).call(scenarioTags, '@debug');
  let _result3 = [];

  for (let _key3 = 0, _length3 = specs.length, _value3; _key3 < _length3; ++_key3) {
    var _context5, _context6, _context7;

    _value3 = specs[_key3];

    const _tags = (0, _map.default)(_context5 = _value3.scenario.tags).call(_context5, ({
      name: _name
    }) => _name);

    const _examples = (0, _table.parseExampleTable)(_value3.scenario.examples);

    const _shouldSkipForDebug = documentHasDebugTag && !(0, _includes.default)(_tags).call(_tags, '@debug');

    const _skip = _shouldSkipForDebug || (0, _includes.default)(_tags).call(_tags, '@skip') || hasTags && !_tags.length && !(0, _some.default)(_tags).call(_tags, _tags2.matchesTags);

    _result3 = (0, _concat.default)(_context6 = []).call(_context6, (0, _toConsumableArray2.default)(_result3), (0, _toConsumableArray2.default)(_examples.length ? (0, _map.default)(_context7 = (0, _table.generateExampleTableSteps)(_examples, _value3.scenario)).call(_context7, spec => _objectSpread(_objectSpread({}, spec), {}, {
      skip: _skip
    })) : [_objectSpread(_objectSpread({}, _value3.scenario), {}, {
      skip: _skip,
      steps: _value3.scenario.steps
    })]));
  }

  const scenarios = _result3;
  const skipFeature = shouldSkipFeature || hasTags && !documentHasTags && !documentContainsSpecsWithTags && !hasExcludeTags || scenarios.length === 0;
  let _result4 = [];

  for (let _key4 = 0, _length4 = scenarios.length, _value4; _key4 < _length4; ++_key4) {
    var _context8;

    _value4 = scenarios[_key4];
    _result4[_key4] = _objectSpread(_objectSpread({}, _value4), {}, {
      path: featurePath,
      steps: (0, _concat.default)(_context8 = []).call(_context8, (0, _toConsumableArray2.default)(hasBackground ? document.children[0].background.steps : []), (0, _toConsumableArray2.default)(_value4.steps))
    });
  }

  const suites = _result4;
  let _result5 = [];

  for (let _key5 = 0, _length5 = suites.length, _value5; _key5 < _length5; ++_key5) {
    _value5 = suites[_key5];
    _result5[_key5] = _objectSpread(_objectSpread({}, _value5), {}, {
      steps: (0, _steps.parseSteps)(_value5.steps, cucumberSupportCode.stepDefinitions)
    });
  }

  return {
    document,
    afterEach: cucumberSupportCode.afterTestCaseHookDefinitions,
    afterAll: cucumberSupportCode.afterTestRunHookDefinitions,
    beforeEach: cucumberSupportCode.beforeTestCaseHookDefinitions,
    beforeAll: cucumberSupportCode.beforeTestRunHookDefinitions,
    skip: skipFeature,
    suites: _result5
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,