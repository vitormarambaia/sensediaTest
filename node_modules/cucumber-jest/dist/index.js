"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/json/stringify"));

var _crypto = _interopRequireDefault(require("crypto"));

var _core = require("@babel/core");

var _babelPresetJest = _interopRequireDefault(require("babel-preset-jest"));

var _default = {
  canInstrument: false,
  getCacheKey: (fileData, filename, configString, {
    instrument
  }) => _crypto.default.createHash('md5').update('\0', 'utf8').update(fileData).update('\0', 'utf8').update(filename).update('\0', 'utf8').update(configString).update('\0', 'utf8').update('\0', 'utf8').update(instrument ? 'instrument' : '').digest('hex'),

  process(src, filePath, jestConfig) {
    const extensions = (0, _stringify.default)(jestConfig.moduleFileExtensions);
    const testFile = `
            const exec = require('cucumber-jest/dist/exec').exec;            
            exec('${jestConfig.cwd}', '${filePath}', ${extensions})
        `;
    const featureFile = (0, _core.transform)(testFile, {
      filename: filePath,
      presets: [_babelPresetJest.default],
      root: jestConfig.cwd
    });
    return featureFile ? featureFile.code : src;
  }

};
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJjYW5JbnN0cnVtZW50IiwiZ2V0Q2FjaGVLZXkiLCJmaWxlRGF0YSIsImZpbGVuYW1lIiwiY29uZmlnU3RyaW5nIiwiaW5zdHJ1bWVudCIsImNyeXB0byIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiLCJwcm9jZXNzIiwic3JjIiwiZmlsZVBhdGgiLCJqZXN0Q29uZmlnIiwiZXh0ZW5zaW9ucyIsIm1vZHVsZUZpbGVFeHRlbnNpb25zIiwidGVzdEZpbGUiLCJjd2QiLCJmZWF0dXJlRmlsZSIsInByZXNldHMiLCJqZXN0UHJlc2V0Iiwicm9vdCIsImNvZGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBRUE7O2VBSWU7QUFDWEEsRUFBQUEsYUFBYSxFQUFFLEtBREo7QUFFWEMsRUFBQUEsV0FBVyxFQUFFLENBQUNDLFFBQUQsRUFBV0MsUUFBWCxFQUFxQkMsWUFBckIsRUFBbUM7QUFBQ0MsSUFBQUE7QUFBRCxHQUFuQyxLQUNUQyxnQkFDS0MsVUFETCxDQUNnQixLQURoQixFQUVLQyxNQUZMLENBRVksSUFGWixFQUVrQixNQUZsQixFQUdLQSxNQUhMLENBR1lOLFFBSFosRUFJS00sTUFKTCxDQUlZLElBSlosRUFJa0IsTUFKbEIsRUFLS0EsTUFMTCxDQUtZTCxRQUxaLEVBTUtLLE1BTkwsQ0FNWSxJQU5aLEVBTWtCLE1BTmxCLEVBT0tBLE1BUEwsQ0FPWUosWUFQWixFQVFLSSxNQVJMLENBUVksSUFSWixFQVFrQixNQVJsQixFQVNLQSxNQVRMLENBU1ksSUFUWixFQVNrQixNQVRsQixFQVVLQSxNQVZMLENBVVlILFVBQVUsR0FBRyxZQUFILEdBQWtCLEVBVnhDLEVBV0tJLE1BWEwsQ0FXWSxLQVhaLENBSE87O0FBZVhDLEVBQUFBLE9BQU8sQ0FDSEMsR0FERyxFQUVIQyxRQUZHLEVBR0hDLFVBSEcsRUFJTDtBQUNFLFVBQU1DLFVBQVUsR0FBRyx3QkFBZUQsVUFBVSxDQUFDRSxvQkFBMUIsQ0FBbkI7QUFFQSxVQUFNQyxRQUFRLEdBQUk7QUFDMUI7QUFDQSxvQkFBb0JILFVBQVUsQ0FBQ0ksR0FBSSxPQUFNTCxRQUFTLE1BQUtFLFVBQVc7QUFDbEUsU0FIUTtBQUtBLFVBQU1JLFdBQVcsR0FBRyxxQkFBVUYsUUFBVixFQUFvQjtBQUNwQ2IsTUFBQUEsUUFBUSxFQUFFUyxRQUQwQjtBQUVwQ08sTUFBQUEsT0FBTyxFQUFFLENBQUNDLHdCQUFELENBRjJCO0FBR3BDQyxNQUFBQSxJQUFJLEVBQUVSLFVBQVUsQ0FBQ0k7QUFIbUIsS0FBcEIsQ0FBcEI7QUFNQSxXQUFPQyxXQUFXLEdBQUdBLFdBQVcsQ0FBQ0ksSUFBZixHQUFzQlgsR0FBeEM7QUFDSDs7QUFsQ1UsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuaW1wb3J0IHt0cmFuc2Zvcm19IGZyb20gJ0BiYWJlbC9jb3JlJztcbmltcG9ydCB0eXBlIHtDb25maWd9IGZyb20gJ0BqZXN0L3R5cGVzJztcbmltcG9ydCBqZXN0UHJlc2V0IGZyb20gJ2JhYmVsLXByZXNldC1qZXN0JztcblxuZXhwb3J0IHR5cGUge1NwZWN9IGZyb20gJy4vcGFyc2Vycy9zdWl0ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjYW5JbnN0cnVtZW50OiBmYWxzZSxcbiAgICBnZXRDYWNoZUtleTogKGZpbGVEYXRhLCBmaWxlbmFtZSwgY29uZmlnU3RyaW5nLCB7aW5zdHJ1bWVudH0pID0+XG4gICAgICAgIGNyeXB0b1xuICAgICAgICAgICAgLmNyZWF0ZUhhc2goJ21kNScpXG4gICAgICAgICAgICAudXBkYXRlKCdcXDAnLCAndXRmOCcpXG4gICAgICAgICAgICAudXBkYXRlKGZpbGVEYXRhKVxuICAgICAgICAgICAgLnVwZGF0ZSgnXFwwJywgJ3V0ZjgnKVxuICAgICAgICAgICAgLnVwZGF0ZShmaWxlbmFtZSlcbiAgICAgICAgICAgIC51cGRhdGUoJ1xcMCcsICd1dGY4JylcbiAgICAgICAgICAgIC51cGRhdGUoY29uZmlnU3RyaW5nKVxuICAgICAgICAgICAgLnVwZGF0ZSgnXFwwJywgJ3V0ZjgnKVxuICAgICAgICAgICAgLnVwZGF0ZSgnXFwwJywgJ3V0ZjgnKVxuICAgICAgICAgICAgLnVwZGF0ZShpbnN0cnVtZW50ID8gJ2luc3RydW1lbnQnIDogJycpXG4gICAgICAgICAgICAuZGlnZXN0KCdoZXgnKSxcbiAgICBwcm9jZXNzKFxuICAgICAgICBzcmM6IHN0cmluZyxcbiAgICAgICAgZmlsZVBhdGg6IENvbmZpZy5QYXRoLFxuICAgICAgICBqZXN0Q29uZmlnOiBDb25maWcuUHJvamVjdENvbmZpZ1xuICAgICkge1xuICAgICAgICBjb25zdCBleHRlbnNpb25zID0gSlNPTi5zdHJpbmdpZnkoamVzdENvbmZpZy5tb2R1bGVGaWxlRXh0ZW5zaW9ucyk7XG5cbiAgICAgICAgY29uc3QgdGVzdEZpbGUgPSBgXG4gICAgICAgICAgICBjb25zdCBleGVjID0gcmVxdWlyZSgnY3VjdW1iZXItamVzdC9kaXN0L2V4ZWMnKS5leGVjOyAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhlYygnJHtqZXN0Q29uZmlnLmN3ZH0nLCAnJHtmaWxlUGF0aH0nLCAke2V4dGVuc2lvbnN9KVxuICAgICAgICBgO1xuXG4gICAgICAgIGNvbnN0IGZlYXR1cmVGaWxlID0gdHJhbnNmb3JtKHRlc3RGaWxlLCB7XG4gICAgICAgICAgICBmaWxlbmFtZTogZmlsZVBhdGgsXG4gICAgICAgICAgICBwcmVzZXRzOiBbamVzdFByZXNldF0sXG4gICAgICAgICAgICByb290OiBqZXN0Q29uZmlnLmN3ZFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZmVhdHVyZUZpbGUgPyBmZWF0dXJlRmlsZS5jb2RlIDogc3JjO1xuICAgIH1cbn07XG4iXX0=